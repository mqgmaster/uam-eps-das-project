/**
 * generated by Xtext
 */
package autoevaluacion.generator;

import Autoevaluacion.Wizard;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class AutoevaluacionGenerator implements IGenerator {
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    EList<EObject> _contents = resource.getContents();
    EObject _head = IterableExtensions.<EObject>head(_contents);
    CharSequence _Main = this.Main(((Wizard) _head));
    fsa.generateFile("main/Main.java", _Main);
    CharSequence _Answer = this.Answer();
    fsa.generateFile("autoevaluacion/answer/Answer.java", _Answer);
    CharSequence _MultipleAnswer = this.MultipleAnswer();
    fsa.generateFile("autoevaluacion/answer/MultipleAnswer.java", _MultipleAnswer);
    CharSequence _UniqueAnswer = this.UniqueAnswer();
    fsa.generateFile("autoevaluacion/answer/UniqueAnswer.java", _UniqueAnswer);
    CharSequence _WrittenAnswer = this.WrittenAnswer();
    fsa.generateFile("autoevaluacion/answer/WrittenAnswer.java", _WrittenAnswer);
    CharSequence _Exercise = this.Exercise();
    fsa.generateFile("autoevaluacion/Exercise.java", _Exercise);
    CharSequence _ExercisePanel = this.ExercisePanel();
    fsa.generateFile("autoevaluacion/ExercisePanel.java", _ExercisePanel);
    CharSequence _Panel = this.Panel();
    fsa.generateFile("autoevaluacion/Panel.java", _Panel);
    EList<EObject> _contents_1 = resource.getContents();
    EObject _head_1 = IterableExtensions.<EObject>head(_contents_1);
    CharSequence _compile = this.compile(((Wizard) _head_1));
    fsa.generateFile("autoevaluacion/Autoevaluacion.java", _compile);
  }
  
  public CharSequence Main(final Wizard w) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package main;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import autoevaluacion.Autoevaluacion;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Main {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Autoevaluacion autoevaluacion = new Autoevaluacion(");
    double _puntuacion = w.getPuntuacion();
    _builder.append(_puntuacion, "\t\t");
    _builder.append(",");
    double _penalizacion = w.getPenalizacion();
    _builder.append(_penalizacion, "\t\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("autoevaluacion.mostrar();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    return _builder;
  }
  
  public CharSequence Answer() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package autoevaluacion.answer;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.Arrays;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.JPanel;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class Answer {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ArrayList<String> correctas = new ArrayList<String>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ArrayList<String> alternativas = new ArrayList<String>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ArrayList<String> seleccionadas = new ArrayList<String>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static enum AnswerType {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("UNIQUE,");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("MULTIPLE,");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("WRITTEN,");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ORDINATION};");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Answer(String[] correctas,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String[] alternativas) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.correctas = new ArrayList<String>(Arrays.asList(correctas));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.alternativas = new ArrayList<String>(Arrays.asList(alternativas));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.seleccionadas = new ArrayList<String>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ArrayList<String> getCorrectas() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return correctas;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setCorrectas(ArrayList<String> correctas) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.correctas = correctas;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ArrayList<String> getAlternativas() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return alternativas;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setAlternativas(ArrayList<String> alternativas) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.alternativas = alternativas;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ArrayList<String> getSeleccionadas() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return seleccionadas;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setSeleccionadas(ArrayList<String> seleccionadas) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.seleccionadas = seleccionadas;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public abstract JPanel createComponent();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public abstract boolean corrige();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public abstract JPanel muestraCorreccion();");
    _builder.newLine();
    _builder.append("}");
    return _builder;
  }
  
  public CharSequence MultipleAnswer() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.append("package autoevaluacion.answer;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.awt.Color;");
    _builder.newLine();
    _builder.append("import java.awt.GridLayout;");
    _builder.newLine();
    _builder.append("import java.awt.event.ActionEvent;");
    _builder.newLine();
    _builder.append("import java.awt.event.ActionListener;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.Collections;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.JCheckBox;");
    _builder.newLine();
    _builder.append("import javax.swing.JLabel;");
    _builder.newLine();
    _builder.append("import javax.swing.JPanel;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class MultipleAnswer extends Answer implements ActionListener {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ArrayList<JCheckBox> group = new ArrayList<JCheckBox>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public MultipleAnswer(String[] correctas, String[] alternativas) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(correctas, alternativas);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JPanel createComponent(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayList<String> resp = new ArrayList<String>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("resp.addAll(getCorrectas());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("resp.addAll(getAlternativas());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Collections.shuffle(resp);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("group = new ArrayList<JCheckBox>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JPanel panel = new JPanel(new GridLayout(resp.size(),1));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(String r : resp){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("JCheckBox rb = new JCheckBox(r);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("rb.setActionCommand(r);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("rb.addActionListener((ActionListener) this);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("group.add(rb);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("panel.add(rb);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return panel;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void actionPerformed(ActionEvent e) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(getSeleccionadas().contains(e.getActionCommand())){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("getSeleccionadas().remove(e.getActionCommand());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("getSeleccionadas().add(e.getActionCommand());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayList<String> selec = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i = 0; i < group.size(); i++){");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("JCheckBox cb = group.get(i);");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("if (cb.isSelected()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("selec.add(cb.getActionCommand());");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("setSeleccionadas(selec);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean corrige(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(getSeleccionadas().isEmpty() || getCorrectas().isEmpty())");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int flag = 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(String s : getSeleccionadas()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(getCorrectas().contains(s)){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("flag++;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(flag==getCorrectas().size())");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JPanel muestraCorreccion(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JPanel panel = new JPanel(new GridLayout(getCorrectas().size()+getSeleccionadas().size(),1));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(String c : getCorrectas()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("JLabel correcta = new JLabel(c);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("correcta.setForeground(Color.green);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("panel.add(correcta);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(String  s: getSeleccionadas()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(!getCorrectas().contains(s)){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("JLabel seleccionada = new JLabel(s);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("seleccionada.setForeground(Color.red);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("panel.add(seleccionada);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return panel;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    return _builder;
  }
  
  public CharSequence UniqueAnswer() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package autoevaluacion.answer;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.awt.Color;");
    _builder.newLine();
    _builder.append("import java.awt.GridLayout;");
    _builder.newLine();
    _builder.append("import java.awt.event.ActionEvent;");
    _builder.newLine();
    _builder.append("import java.awt.event.ActionListener;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.Collections;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.ButtonGroup;");
    _builder.newLine();
    _builder.append("import javax.swing.JLabel;");
    _builder.newLine();
    _builder.append("import javax.swing.JPanel;");
    _builder.newLine();
    _builder.append("import javax.swing.JRadioButton;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class UniqueAnswer extends Answer implements ActionListener {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public UniqueAnswer(String[] correctas, String[] alternativas) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(correctas, alternativas);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JPanel createComponent(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayList<String> resp = new ArrayList<String>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("resp.addAll(getCorrectas());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("resp.addAll(getAlternativas());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Collections.shuffle(resp);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ButtonGroup group = new ButtonGroup();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JPanel panel = new JPanel(new GridLayout(resp.size(),1));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(String r : resp){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("JRadioButton rb = new JRadioButton(r);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("rb.setActionCommand(r);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("rb.addActionListener((ActionListener) this);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("group.add(rb);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("panel.add(rb);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return panel;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void actionPerformed(ActionEvent e) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayList<String> selec = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("selec.add(e.getActionCommand());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("setSeleccionadas(selec);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/*if(!getSeleccionadas().contains(e.getActionCommand())){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("getSeleccionadas().clear();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("getSeleccionadas().add(e.getActionCommand());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean corrige(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(getSeleccionadas().isEmpty() || getCorrectas().isEmpty())");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(getCorrectas().contains(getSeleccionadas().get(0))){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JPanel muestraCorreccion(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JPanel panel = new JPanel(new GridLayout(2,1));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JLabel correcta = new JLabel(getCorrectas().get(0));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("correcta.setForeground(Color.green);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("panel.add(correcta);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JLabel seleccionada = new JLabel(getSeleccionadas().get(0));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("seleccionada.setForeground(Color.red);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("panel.add(seleccionada);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return panel;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    return _builder;
  }
  
  public CharSequence WrittenAnswer() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package autoevaluacion.answer;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.JPanel;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class WrittenAnswer extends Answer {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public WrittenAnswer(String[] correctas, String[] alternativas) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(correctas, alternativas);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JPanel createComponent() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean corrige() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JPanel muestraCorreccion() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    return _builder;
  }
  
  public CharSequence Exercise() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package autoevaluacion;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.awt.GridLayout;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.JLabel;");
    _builder.newLine();
    _builder.append("import javax.swing.JPanel;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import autoevaluacion.answer.Answer;");
    _builder.newLine();
    _builder.append("import autoevaluacion.answer.MultipleAnswer;");
    _builder.newLine();
    _builder.append("import autoevaluacion.answer.UniqueAnswer;");
    _builder.newLine();
    _builder.append("import autoevaluacion.answer.WrittenAnswer;");
    _builder.newLine();
    _builder.append("import autoevaluacion.answer.Answer.AnswerType;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Exercise implements Comparable<Exercise> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String enunciado;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private double puntuacionEj;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String categoria;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Integer orden;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Answer respuestas;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Exercise(String name, String enunciado, double puntuacionEj,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String categoria, int orden,String[] correctas,String[] alternativas, AnswerType tipo) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.enunciado = enunciado;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.puntuacionEj = puntuacionEj;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.categoria = categoria;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.orden = orden;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("switch(tipo){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("case UNIQUE:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.respuestas = new UniqueAnswer(correctas, alternativas);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("case MULTIPLE:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.respuestas = new MultipleAnswer(correctas, alternativas);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("case WRITTEN:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.respuestas = new WrittenAnswer(correctas, alternativas);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/*case Ordenacion:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.respuestas = new Ordenacion(correctas, alternativas);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("break;*/");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("default:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JPanel createComponent(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JPanel panel = new JPanel(new GridLayout(2,1));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JPanel enun = new JPanel(new GridLayout(2,1));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JLabel n = new JLabel(name+\" \"+orden+\" :\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("enun.add(n);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JLabel e = new JLabel(enunciado);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("enun.add(e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("panel.add(enun);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("panel.add(respuestas.createComponent());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return panel;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JPanel muestraCorreccion(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JPanel panel = new JPanel(new GridLayout(2,1));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JPanel enun = new JPanel(new GridLayout(2,1));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JLabel n = new JLabel(name+\" \"+orden+\" :\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("enun.add(n);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JLabel e = new JLabel(enunciado);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("enun.add(e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("panel.add(enun);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("panel.add(respuestas.muestraCorreccion());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return panel;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public double corrige(double penalizacion){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(respuestas.corrige())");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return puntuacionEj;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return puntuacionEj*(-penalizacion);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int compareTo(Exercise o) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return orden.compareTo(o.orden);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean isAnswered(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(respuestas.getSeleccionadas().isEmpty())");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean isCorrect() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return respuestas.corrige();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    return _builder;
  }
  
  public CharSequence ExercisePanel() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package autoevaluacion;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.awt.event.ActionEvent;");
    _builder.newLine();
    _builder.append("import java.awt.event.ActionListener;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.Collections;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.JPanel;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"serial\")");
    _builder.newLine();
    _builder.append("public class ExercisePanel extends Panel {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//private JScrollPane scrollP;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private PanelType type;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private JPanel exercisesContainer = new JPanel();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static enum PanelType {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("CLASSIC,");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("WIZARD,");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("WIZARD_ADAPTATIVE};");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ArrayList<Exercise> exercises = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ArrayList<Integer> answeredExercises = new ArrayList<>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ExercisePanel(String name, PanelType type) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(name);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.type = type;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ArrayList<Exercise> getAllExercises() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return exercises;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addExercise(Exercise e){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("exercises.add(e);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setupView(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.add(exercisesContainer);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("switch(type){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case CLASSIC :");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case WIZARD:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("showAllExercises();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case WIZARD_ADAPTATIVE:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("showRamdomExercise();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super.setupView();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void showAllExercises() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Collections.sort(exercises);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(Exercise e: exercises)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("exercisesContainer.add(e.createComponent());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private boolean showRamdomExercise() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i=0; i<exercises.size(); i++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (!answeredExercises.contains(i)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("exercisesContainer.add(exercises.get(i).createComponent());");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("answeredExercises.add(i);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("exercisesContainer.updateUI();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void clearExercisesView() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("exercisesContainer.removeAll();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Exercise getLastAnswered() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return exercises.get(answeredExercises.get(answeredExercises.size()-1));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addNextButton(String label, final ActionListener action) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("switch(type) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case CLASSIC :");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case WIZARD:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("super.addButton(label, action);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case WIZARD_ADAPTATIVE:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("super.addButton(label, new ActionListener() {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("public void actionPerformed(ActionEvent e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (getLastAnswered().isCorrect()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("action.actionPerformed(e);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("ExercisePanel.this.clearExercisesView();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("if (!ExercisePanel.this.showRamdomExercise()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("action.actionPerformed(e);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    return _builder;
  }
  
  public CharSequence Panel() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package autoevaluacion;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.awt.event.ActionListener;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.JButton;");
    _builder.newLine();
    _builder.append("import javax.swing.JPanel;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"serial\")");
    _builder.newLine();
    _builder.append("public class Panel extends JPanel {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected JPanel buttonContainer = new JPanel();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Panel(String name) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.setName(name);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setupView() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.add(buttonContainer);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addButton(String label, ActionListener action) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JButton button = new JButton(label);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("buttonContainer.add(button);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("button.addActionListener(action);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Wizard w) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
}
