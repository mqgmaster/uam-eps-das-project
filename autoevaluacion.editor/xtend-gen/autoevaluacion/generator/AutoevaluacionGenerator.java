/**
 * generated by Xtext
 */
package autoevaluacion.generator;

import Autoevaluacion.Clasico;
import Autoevaluacion.Ejercicio;
import Autoevaluacion.Hoja;
import Autoevaluacion.Ordenacion;
import Autoevaluacion.Respuesta;
import Autoevaluacion.RespuestaMultiple;
import Autoevaluacion.RespuestaUnica;
import Autoevaluacion.TextoLibre;
import Autoevaluacion.Wizard;
import Autoevaluacion.WizardAdaptativo;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure2;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class AutoevaluacionGenerator implements IGenerator {
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    final ArrayList<String> lista = CollectionLiterals.<String>newArrayList();
    EList<EObject> _contents = resource.getContents();
    EObject _head = IterableExtensions.<EObject>head(_contents);
    Hoja hoja = ((Hoja) _head);
    EList<Ejercicio> _ejercicios = hoja.getEjercicios();
    final Procedure2<Ejercicio,Integer> _function = new Procedure2<Ejercicio,Integer>() {
      public void apply(final Ejercicio elem, final Integer index) {
        String _categoria = elem.getCategoria();
        boolean _contains = lista.contains(_categoria);
        boolean _not = (!_contains);
        if (_not) {
          String _categoria_1 = elem.getCategoria();
          lista.add(_categoria_1);
        }
      }
    };
    IterableExtensions.<Ejercicio>forEach(_ejercicios, _function);
    EList<EObject> _contents_1 = resource.getContents();
    EObject _head_1 = IterableExtensions.<EObject>head(_contents_1);
    CharSequence _Main = this.Main(((Hoja) _head_1));
    fsa.generateFile("main/Main.java", _Main);
    CharSequence _Answer = this.Answer();
    fsa.generateFile("autoevaluacion/answer/Answer.java", _Answer);
    CharSequence _MultipleAnswer = this.MultipleAnswer();
    fsa.generateFile("autoevaluacion/answer/MultipleAnswer.java", _MultipleAnswer);
    CharSequence _UniqueAnswer = this.UniqueAnswer();
    fsa.generateFile("autoevaluacion/answer/UniqueAnswer.java", _UniqueAnswer);
    CharSequence _WrittenAnswer = this.WrittenAnswer();
    fsa.generateFile("autoevaluacion/answer/WrittenAnswer.java", _WrittenAnswer);
    CharSequence _OrdinationAnswer = this.OrdinationAnswer();
    fsa.generateFile("autoevaluacion/answer/OrdinationAnswer.java", _OrdinationAnswer);
    CharSequence _OrdinationItem = this.OrdinationItem();
    fsa.generateFile("autoevaluacion/answer/OrdinationItem.java", _OrdinationItem);
    CharSequence _Exercise = this.Exercise();
    fsa.generateFile("autoevaluacion/Exercise.java", _Exercise);
    CharSequence _ExercisePanel = this.ExercisePanel();
    fsa.generateFile("autoevaluacion/ExercisePanel.java", _ExercisePanel);
    CharSequence _Panel = this.Panel();
    fsa.generateFile("autoevaluacion/Panel.java", _Panel);
    EList<EObject> _contents_2 = resource.getContents();
    EObject _head_2 = IterableExtensions.<EObject>head(_contents_2);
    CharSequence _compile = this.compile(((Hoja) _head_2), lista);
    fsa.generateFile("autoevaluacion/Autoevaluacion.java", _compile);
  }
  
  public CharSequence Main(final Hoja h) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package main;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import autoevaluacion.Autoevaluacion;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Main {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Autoevaluacion autoevaluacion = new Autoevaluacion(");
    double _puntuacion = h.getPuntuacion();
    _builder.append(_puntuacion, "\t\t");
    _builder.append(",");
    double _penalizacion = h.getPenalizacion();
    _builder.append(_penalizacion, "\t\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("autoevaluacion.mostrar();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    return _builder;
  }
  
  public CharSequence Answer() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package autoevaluacion.answer;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.Arrays;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.JPanel;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class Answer {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ArrayList<String> correctas = new ArrayList<String>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ArrayList<String> alternativas = new ArrayList<String>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ArrayList<String> seleccionadas = new ArrayList<String>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static enum AnswerType {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("UNIQUE,");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("MULTIPLE,");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("WRITTEN,");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ORDINATION};");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Answer(String[] correctas,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String[] alternativas) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.correctas = new ArrayList<String>(Arrays.asList(correctas));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.alternativas = new ArrayList<String>(Arrays.asList(alternativas));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.seleccionadas = new ArrayList<String>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ArrayList<String> getCorrectas() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return correctas;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setCorrectas(ArrayList<String> correctas) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.correctas = correctas;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ArrayList<String> getAlternativas() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return alternativas;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setAlternativas(ArrayList<String> alternativas) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.alternativas = alternativas;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ArrayList<String> getSeleccionadas() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return seleccionadas;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setSeleccionadas(ArrayList<String> seleccionadas) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.seleccionadas = seleccionadas;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean isAnswered() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(seleccionadas.isEmpty())");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public abstract JPanel createComponent();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public abstract boolean corrige();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public abstract JPanel muestraCorreccion();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence MultipleAnswer() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package autoevaluacion.answer;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.awt.Color;");
    _builder.newLine();
    _builder.append("import java.awt.GridLayout;");
    _builder.newLine();
    _builder.append("import java.awt.event.ActionEvent;");
    _builder.newLine();
    _builder.append("import java.awt.event.ActionListener;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.Collections;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.JCheckBox;");
    _builder.newLine();
    _builder.append("import javax.swing.JLabel;");
    _builder.newLine();
    _builder.append("import javax.swing.JPanel;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class MultipleAnswer extends Answer implements ActionListener {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ArrayList<JCheckBox> group = new ArrayList<JCheckBox>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public MultipleAnswer(String[] correctas, String[] alternativas) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(correctas, alternativas);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JPanel createComponent(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayList<String> resp = new ArrayList<String>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("resp.addAll(getCorrectas());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("resp.addAll(getAlternativas());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Collections.shuffle(resp);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("group = new ArrayList<JCheckBox>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JPanel panel = new JPanel(new GridLayout(resp.size(),1));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(String r : resp){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("JCheckBox rb = new JCheckBox(r);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("rb.setActionCommand(r);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("rb.addActionListener((ActionListener) this);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("group.add(rb);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("panel.add(rb);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return panel;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void actionPerformed(ActionEvent e) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(getSeleccionadas().contains(e.getActionCommand())){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("getSeleccionadas().remove(e.getActionCommand());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("getSeleccionadas().add(e.getActionCommand());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayList<String> selec = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i = 0; i < group.size(); i++){");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("JCheckBox cb = group.get(i);");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("if (cb.isSelected()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("selec.add(cb.getActionCommand());");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("setSeleccionadas(selec);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean corrige(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(getSeleccionadas().isEmpty() || getCorrectas().isEmpty())");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int flag = 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(String s : getSeleccionadas()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(getCorrectas().contains(s)){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("flag++;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(flag==getCorrectas().size())");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JPanel muestraCorreccion(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JPanel panel = new JPanel(new GridLayout(getCorrectas().size()+getSeleccionadas().size(),1));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(String c : getCorrectas()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("JLabel correcta = new JLabel(c);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("correcta.setForeground(Color.green);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("panel.add(correcta);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(String  s: getSeleccionadas()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(!getCorrectas().contains(s)){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("JLabel seleccionada = new JLabel(s);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("seleccionada.setForeground(Color.red);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("panel.add(seleccionada);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return panel;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence UniqueAnswer() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package autoevaluacion.answer;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.awt.Color;");
    _builder.newLine();
    _builder.append("import java.awt.GridLayout;");
    _builder.newLine();
    _builder.append("import java.awt.event.ActionEvent;");
    _builder.newLine();
    _builder.append("import java.awt.event.ActionListener;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.Collections;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.ButtonGroup;");
    _builder.newLine();
    _builder.append("import javax.swing.JLabel;");
    _builder.newLine();
    _builder.append("import javax.swing.JPanel;");
    _builder.newLine();
    _builder.append("import javax.swing.JRadioButton;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class UniqueAnswer extends Answer implements ActionListener {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public UniqueAnswer(String[] correctas, String[] alternativas) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(correctas, alternativas);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JPanel createComponent(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayList<String> resp = new ArrayList<String>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("resp.addAll(getCorrectas());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("resp.addAll(getAlternativas());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Collections.shuffle(resp);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ButtonGroup group = new ButtonGroup();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JPanel panel = new JPanel(new GridLayout(resp.size(),1));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(String r : resp){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("JRadioButton rb = new JRadioButton(r);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("rb.setActionCommand(r);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("rb.addActionListener((ActionListener) this);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("group.add(rb);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("panel.add(rb);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return panel;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void actionPerformed(ActionEvent e) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayList<String> selec = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("selec.add(e.getActionCommand());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("setSeleccionadas(selec);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/*if(!getSeleccionadas().contains(e.getActionCommand())){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("getSeleccionadas().clear();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("getSeleccionadas().add(e.getActionCommand());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean corrige(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(getSeleccionadas().isEmpty() || getCorrectas().isEmpty())");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(getCorrectas().contains(getSeleccionadas().get(0))){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JPanel muestraCorreccion(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JPanel panel = new JPanel(new GridLayout(2,1));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JLabel correcta = new JLabel(getCorrectas().get(0));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("correcta.setForeground(Color.green);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("panel.add(correcta);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JLabel seleccionada = new JLabel(getSeleccionadas().get(0));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("seleccionada.setForeground(Color.red);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("panel.add(seleccionada);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return panel;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    return _builder;
  }
  
  public CharSequence WrittenAnswer() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package autoevaluacion.answer;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.awt.Color;");
    _builder.newLine();
    _builder.append("import java.awt.GridLayout;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.JLabel;");
    _builder.newLine();
    _builder.append("import javax.swing.JPanel;");
    _builder.newLine();
    _builder.append("import javax.swing.JTextArea;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class WrittenAnswer extends Answer {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final JTextArea textArea = new JTextArea(2,2);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public WrittenAnswer(String[] correctas, String[] alternativas) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(correctas, alternativas);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JPanel createComponent(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JPanel panel = new JPanel(new GridLayout(getCorrectas().size(),1));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("panel.add(textArea);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return panel;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean corrige(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return getCorrectas().contains(textArea.getText());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean isAnswered() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return !textArea.getText().trim().isEmpty();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JPanel muestraCorreccion(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JPanel panel = new JPanel(new GridLayout(2,1));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JLabel correcta = new JLabel(getCorrectas().get(0));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("correcta.setForeground(Color.green);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("panel.add(correcta);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JLabel written = new JLabel(textArea.getText());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("written.setForeground(Color.red);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("panel.add(written);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return panel;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    return _builder;
  }
  
  public CharSequence OrdinationAnswer() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package autoevaluacion.answer;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.awt.Color;");
    _builder.newLine();
    _builder.append("import java.awt.GridLayout;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.Collections;");
    _builder.newLine();
    _builder.append("import java.util.HashSet;");
    _builder.newLine();
    _builder.append("import java.util.Set;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.JLabel;");
    _builder.newLine();
    _builder.append("import javax.swing.JPanel;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class OrdinationAnswer extends Answer {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final ArrayList<OrdinationItem> answersList = new ArrayList<>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public OrdinationAnswer(String[] correctas, String[] alternativas) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(correctas, alternativas);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JPanel createComponent(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayList<String> resp = new ArrayList<String>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("resp.addAll(getCorrectas());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Collections.shuffle(resp);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("OrdinationItem item;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JPanel panel = new JPanel(new GridLayout(getCorrectas().size(),1));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(String r : resp){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("item = new OrdinationItem(r);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("answersList.add(item);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("panel.add(item);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return panel;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean corrige() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Collections.sort(answersList);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Set<OrdinationItem> answersSet = new HashSet<>(answersList);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (answersSet.size() != answersList.size()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i=0;i<answersList.size();i++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (answersList.get(i).getAnswerPosition().isEmpty()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (!answersList.get(i).getAnswerText().equals(getCorrectas().get(i))) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean isAnswered() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (OrdinationItem item : answersList) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (!item.getAnswerPosition().isEmpty()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JPanel muestraCorreccion(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JPanel panel = new JPanel(new GridLayout(getCorrectas().size(),1));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i=0;i<answersList.size();i++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("JLabel correcta = new JLabel(answersList.get(i).getAnswerText());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("correcta.setForeground(Color.green);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("panel.add(correcta);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("JLabel user = new JLabel(getCorrectas().get(i));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (answersList.get(i).getAnswerText().equals(getCorrectas().get(i))) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("user.setForeground(Color.green);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("user.setForeground(Color.red);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("panel.add(user);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return panel;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    return _builder;
  }
  
  public CharSequence OrdinationItem() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package autoevaluacion.answer;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.JLabel;");
    _builder.newLine();
    _builder.append("import javax.swing.JPanel;");
    _builder.newLine();
    _builder.append("import javax.swing.JTextArea;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"serial\")");
    _builder.newLine();
    _builder.append("public class OrdinationItem extends JPanel implements Comparable<OrdinationItem> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final JTextArea answerPosition = new JTextArea(1,2);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final JLabel answerLabel = new JLabel();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public OrdinationItem(String answerText) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.answerLabel.setText(answerText);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.add(answerPosition);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.add(answerLabel);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int compareTo(OrdinationItem another) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.getAnswerPosition().compareTo(another.getAnswerPosition());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean equals(Object another) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (another instanceof OrdinationItem) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (((OrdinationItem) another).getAnswerPosition().equals(this.getAnswerPosition())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int hashCode() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.getAnswerPosition().hashCode();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getAnswerPosition() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return answerPosition.getText();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getAnswerText() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return answerLabel.getText();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    return _builder;
  }
  
  public CharSequence Exercise() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package autoevaluacion;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.awt.GridLayout;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.JLabel;");
    _builder.newLine();
    _builder.append("import javax.swing.JPanel;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import autoevaluacion.answer.Answer;");
    _builder.newLine();
    _builder.append("import autoevaluacion.answer.MultipleAnswer;");
    _builder.newLine();
    _builder.append("import autoevaluacion.answer.OrdinationAnswer;");
    _builder.newLine();
    _builder.append("import autoevaluacion.answer.UniqueAnswer;");
    _builder.newLine();
    _builder.append("import autoevaluacion.answer.WrittenAnswer;");
    _builder.newLine();
    _builder.append("import autoevaluacion.answer.Answer.AnswerType;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Exercise implements Comparable<Exercise> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String enunciado;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private double puntuacionEj;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String categoria;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Integer orden;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Answer respuestas;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Exercise(String name, String enunciado, double puntuacionEj,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String categoria, int orden,String[] correctas,String[] alternativas, AnswerType tipo) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.enunciado = enunciado;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.puntuacionEj = puntuacionEj;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.categoria = categoria;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.orden = orden;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("switch(tipo){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("case UNIQUE:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.respuestas = new UniqueAnswer(correctas, alternativas);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("case MULTIPLE:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.respuestas = new MultipleAnswer(correctas, alternativas);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("case WRITTEN:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.respuestas = new WrittenAnswer(correctas, alternativas);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("case ORDINATION:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.respuestas = new OrdinationAnswer(correctas, alternativas);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("default:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JPanel createComponent(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JPanel panel = new JPanel(new GridLayout(2,1));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JPanel enun = new JPanel(new GridLayout(2,1));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JLabel n = new JLabel(name+\" \"+orden+\" :\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("enun.add(n);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JLabel e = new JLabel(enunciado);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("enun.add(e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("panel.add(enun);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("panel.add(respuestas.createComponent());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return panel;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JPanel muestraCorreccion(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JPanel panel = new JPanel(new GridLayout(2,1));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JPanel enun = new JPanel(new GridLayout(2,1));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JLabel n = new JLabel(name+\" \"+orden+\" :\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("enun.add(n);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JLabel e = new JLabel(enunciado);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("enun.add(e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("panel.add(enun);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("panel.add(respuestas.muestraCorreccion());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return panel;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public double corrige(double penalizacion){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(respuestas.corrige())");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return puntuacionEj;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return puntuacionEj*(-penalizacion);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int compareTo(Exercise o) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return orden.compareTo(o.orden);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean isAnswered(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return respuestas.isAnswered();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean isCorrect() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return respuestas.corrige();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence ExercisePanel() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package autoevaluacion;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.awt.event.ActionEvent;");
    _builder.newLine();
    _builder.append("import java.awt.event.ActionListener;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.Collections;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.JPanel;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"serial\")");
    _builder.newLine();
    _builder.append("public class ExercisePanel extends Panel {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//private JScrollPane scrollP;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private PanelType type;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private JPanel exercisesContainer = new JPanel();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static enum PanelType {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("CLASSIC,");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("WIZARD,");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("WIZARD_ADAPTATIVE};");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ArrayList<Exercise> exercises = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ArrayList<Integer> answeredExercises = new ArrayList<>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ExercisePanel(String name, PanelType type) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(name);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.type = type;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ArrayList<Exercise> getAllExercises() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return exercises;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addExercise(Exercise e){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("exercises.add(e);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setupView(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.add(exercisesContainer);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("switch(type){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case CLASSIC :");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case WIZARD:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("showAllExercises();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case WIZARD_ADAPTATIVE:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("showNewExercise();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super.setupView();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void showAllExercises() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Collections.sort(exercises);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(Exercise e: exercises)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("exercisesContainer.add(e.createComponent());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private boolean showNewExercise() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i=0; i<exercises.size(); i++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (!answeredExercises.contains(i)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("exercisesContainer.add(exercises.get(i).createComponent());");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("answeredExercises.add(i);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("exercisesContainer.updateUI();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void clearExercisesView() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("exercisesContainer.removeAll();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Exercise getLastAnswered() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return exercises.get(answeredExercises.get(answeredExercises.size()-1));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addNextButton(String label, final ActionListener action) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("switch(type) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case CLASSIC :");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case WIZARD:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("super.addButton(label, action);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case WIZARD_ADAPTATIVE:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("super.addButton(label, new ActionListener() {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("public void actionPerformed(ActionEvent e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (getLastAnswered().isCorrect()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("action.actionPerformed(e);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("ExercisePanel.this.clearExercisesView();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("if (!ExercisePanel.this.showNewExercise()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("action.actionPerformed(e);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence Panel() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package autoevaluacion;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.awt.event.ActionListener;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.JButton;");
    _builder.newLine();
    _builder.append("import javax.swing.JPanel;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"serial\")");
    _builder.newLine();
    _builder.append("public class Panel extends JPanel {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected JPanel buttonContainer = new JPanel();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Panel(String name) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.setName(name);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setupView() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.add(buttonContainer);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addButton(String label, ActionListener action) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JButton button = new JButton(label);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("buttonContainer.add(button);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("button.addActionListener(action);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    return _builder;
  }
  
  public CharSequence compile(final Hoja h, final ArrayList<String> categoria) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package autoevaluacion;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.awt.CardLayout;");
    _builder.newLine();
    _builder.append("import java.awt.event.ActionEvent;");
    _builder.newLine();
    _builder.append("import java.awt.event.ActionListener;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.JFrame;");
    _builder.newLine();
    _builder.append("import javax.swing.JLabel;");
    _builder.newLine();
    _builder.append("import javax.swing.JPanel;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import autoevaluacion.ExercisePanel.PanelType;");
    _builder.newLine();
    _builder.append("import autoevaluacion.answer.Answer.AnswerType;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SuppressWarnings(\"serial\")");
    _builder.newLine();
    _builder.append("public class Autoevaluacion extends JFrame {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private double nota;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private double puntuacionStandard;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private double penalizacion;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private JPanel mainContainer = new JPanel(new CardLayout());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ArrayList<ExercisePanel> exercisePanels = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Autoevaluacion (double puntuacionStandard, final double penalizacion) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super (\"Autoevaluacion\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.puntuacionStandard = puntuacionStandard;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.penalizacion = penalizacion;");
    _builder.newLine();
    {
      if ((h instanceof Clasico)) {
        _builder.append("\t\t");
        _builder.append("//Crea una pantalla");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("final ExercisePanel pe = new ExercisePanel(\"clasico\", PanelType.CLASSIC);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("//Anade ejercicios");
        _builder.newLine();
        {
          EList<Ejercicio> _ejercicios = ((Clasico)h).getEjercicios();
          for(final Ejercicio e : _ejercicios) {
            _builder.append("\t\t");
            _builder.append("pe.addExercise(new Exercise(");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("\t\t");
            _builder.append("\"");
            String _name = e.getName();
            _builder.append(_name, "\t\t\t\t");
            _builder.append("\", ");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t\t");
            _builder.append("\"");
            String _enunciado = e.getEnunciado();
            _builder.append(_enunciado, "\t\t\t\t");
            _builder.append("\",");
            _builder.newLineIfNotEmpty();
            {
              double _puntuacionEj = e.getPuntuacionEj();
              boolean _equals = Double.valueOf(_puntuacionEj).equals(Double.valueOf(0.0));
              if (_equals) {
                _builder.append("\t\t");
                _builder.append("\t\t");
                double _puntuacion = ((Clasico)h).getPuntuacion();
                _builder.append(_puntuacion, "\t\t\t\t");
                _builder.append(",");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("\t\t");
                _builder.append("\t\t");
                double _puntuacionEj_1 = e.getPuntuacionEj();
                _builder.append(_puntuacionEj_1, "\t\t\t\t");
                _builder.append(",");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t\t");
            _builder.append("\t\t");
            _builder.append("\"");
            String _categoria = e.getCategoria();
            _builder.append(_categoria, "\t\t\t\t");
            _builder.append("\",");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t\t");
            int _order = e.getOrder();
            _builder.append(_order, "\t\t\t\t");
            _builder.append(", ");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t\t");
            _builder.append("new String[]{");
            _builder.newLine();
            {
              Respuesta _respuesta = e.getRespuesta();
              if ((_respuesta instanceof Ordenacion)) {
                {
                  Respuesta _respuesta_1 = e.getRespuesta();
                  EList<String> _correctas = _respuesta_1.getCorrectas();
                  String _get = _correctas.get(0);
                  String[] _split = _get.split("#");
                  for(final String s : _split) {
                    {
                      Respuesta _respuesta_2 = e.getRespuesta();
                      EList<String> _correctas_1 = _respuesta_2.getCorrectas();
                      String _get_1 = _correctas_1.get(0);
                      String[] _split_1 = _get_1.split("#");
                      int _indexOf = ((List<String>)Conversions.doWrapArray(_split_1)).indexOf(s);
                      Respuesta _respuesta_3 = e.getRespuesta();
                      EList<String> _correctas_2 = _respuesta_3.getCorrectas();
                      String _get_2 = _correctas_2.get(0);
                      String[] _split_2 = _get_2.split("#");
                      int _size = ((List<String>)Conversions.doWrapArray(_split_2)).size();
                      int _minus = (_size - 1);
                      boolean _equals_1 = (_indexOf == _minus);
                      if (_equals_1) {
                        _builder.append("\t\t");
                        _builder.append("\t\t");
                        _builder.append("\"");
                        _builder.append(s, "\t\t\t\t");
                        _builder.append("\"");
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("\t\t");
                        _builder.append("\t\t");
                        _builder.append("\"");
                        _builder.append(s, "\t\t\t\t");
                        _builder.append("\",");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  }
                }
              } else {
                {
                  Respuesta _respuesta_4 = e.getRespuesta();
                  EList<String> _correctas_3 = _respuesta_4.getCorrectas();
                  for(final String c : _correctas_3) {
                    {
                      Respuesta _respuesta_5 = e.getRespuesta();
                      EList<String> _correctas_4 = _respuesta_5.getCorrectas();
                      int _indexOf_1 = _correctas_4.indexOf(c);
                      Respuesta _respuesta_6 = e.getRespuesta();
                      EList<String> _correctas_5 = _respuesta_6.getCorrectas();
                      int _size_1 = _correctas_5.size();
                      int _minus_1 = (_size_1 - 1);
                      boolean _equals_2 = (_indexOf_1 == _minus_1);
                      if (_equals_2) {
                        _builder.append("\t\t");
                        _builder.append("\t\t");
                        _builder.append("\"");
                        _builder.append(c, "\t\t\t\t");
                        _builder.append("\"");
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("\t\t");
                        _builder.append("\t\t");
                        _builder.append("\"");
                        _builder.append(c, "\t\t\t\t");
                        _builder.append("\",");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  }
                }
              }
            }
            _builder.append("\t\t");
            _builder.append("\t\t");
            _builder.append("},");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("\t\t");
            _builder.append("new String[]{");
            _builder.newLine();
            {
              Respuesta _respuesta_7 = e.getRespuesta();
              EList<String> _alternativas = _respuesta_7.getAlternativas();
              for(final String a : _alternativas) {
                {
                  Respuesta _respuesta_8 = e.getRespuesta();
                  EList<String> _alternativas_1 = _respuesta_8.getAlternativas();
                  int _indexOf_2 = _alternativas_1.indexOf(a);
                  Respuesta _respuesta_9 = e.getRespuesta();
                  EList<String> _alternativas_2 = _respuesta_9.getAlternativas();
                  int _size_2 = _alternativas_2.size();
                  int _minus_2 = (_size_2 - 1);
                  boolean _equals_3 = (_indexOf_2 == _minus_2);
                  if (_equals_3) {
                    _builder.append("\t\t");
                    _builder.append("\t\t");
                    _builder.append("\"");
                    _builder.append(a, "\t\t\t\t");
                    _builder.append("\"");
                    _builder.newLineIfNotEmpty();
                  } else {
                    _builder.append("\t\t");
                    _builder.append("\t\t");
                    _builder.append("\"");
                    _builder.append(a, "\t\t\t\t");
                    _builder.append("\",");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
            _builder.append("\t\t");
            _builder.append("\t\t");
            _builder.append("},");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("\t\t");
            _builder.newLine();
            {
              Respuesta _respuesta_10 = e.getRespuesta();
              if ((_respuesta_10 instanceof RespuestaUnica)) {
                _builder.append("\t\t");
                _builder.append("\t\t");
                _builder.append("AnswerType.UNIQUE");
                _builder.newLine();
              } else {
                Respuesta _respuesta_11 = e.getRespuesta();
                if ((_respuesta_11 instanceof RespuestaMultiple)) {
                  _builder.append("\t\t");
                  _builder.append("\t\t");
                  _builder.append("AnswerType.MULTIPLE");
                  _builder.newLine();
                } else {
                  Respuesta _respuesta_12 = e.getRespuesta();
                  if ((_respuesta_12 instanceof TextoLibre)) {
                    _builder.append("\t\t");
                    _builder.append("\t\t");
                    _builder.append("AnswerType.WRITTEN");
                    _builder.newLine();
                  } else {
                    Respuesta _respuesta_13 = e.getRespuesta();
                    if ((_respuesta_13 instanceof Ordenacion)) {
                      _builder.append("\t\t");
                      _builder.append("\t\t");
                      _builder.append("AnswerType.ORDINATION");
                      _builder.newLine();
                    }
                  }
                }
              }
            }
            _builder.append("\t\t");
            _builder.append("\t\t");
            _builder.append("));");
            _builder.newLine();
          }
        }
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("//Anade el boton de correccion");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("pe.addNextButton(\"Corregir\", new ActionListener() {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("public void actionPerformed(ActionEvent arg0) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("Panel panel = createFinalPanel();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("addPanel(panel);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("showPanel(panel);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("});");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("addExercisePanel(pe);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("//Comienza en la pantalla inicial");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("showPanel(pe);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("// anadir panel a la ventana");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("getContentPane().add(mainContainer);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
      } else {
        if ((h instanceof Wizard)) {
          _builder.append("\t\t");
          _builder.append("//Crea pantallas");
          _builder.newLine();
          {
            for(final String c_1 : categoria) {
              _builder.append("\t\t");
              _builder.append("final ExercisePanel p");
              _builder.append(c_1, "\t\t");
              _builder.append(" = new ExercisePanel(\"");
              _builder.append(c_1, "\t\t");
              _builder.append("\", PanelType.WIZARD);");
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.append("\t\t");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("//Anade ejercicios");
          _builder.newLine();
          {
            EList<Ejercicio> _ejercicios_1 = h.getEjercicios();
            for(final Ejercicio e_1 : _ejercicios_1) {
              _builder.append("\t\t");
              _builder.append("p");
              String _categoria_1 = e_1.getCategoria();
              _builder.append(_categoria_1, "\t\t");
              _builder.append(".addExercise(new Exercise(");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("\t\t");
              _builder.append("\"");
              String _name_1 = e_1.getName();
              _builder.append(_name_1, "\t\t\t\t");
              _builder.append("\", ");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("\t\t");
              _builder.append("\"");
              String _enunciado_1 = e_1.getEnunciado();
              _builder.append(_enunciado_1, "\t\t\t\t");
              _builder.append("\", ");
              _builder.newLineIfNotEmpty();
              {
                double _puntuacionEj_2 = e_1.getPuntuacionEj();
                boolean _equals_4 = Double.valueOf(_puntuacionEj_2).equals(Double.valueOf(0.0));
                if (_equals_4) {
                  _builder.append("\t\t");
                  _builder.append("\t\t");
                  double _puntuacion_1 = h.getPuntuacion();
                  _builder.append(_puntuacion_1, "\t\t\t\t");
                  _builder.append(",");
                  _builder.newLineIfNotEmpty();
                } else {
                  _builder.append("\t\t");
                  _builder.append("\t\t");
                  double _puntuacionEj_3 = e_1.getPuntuacionEj();
                  _builder.append(_puntuacionEj_3, "\t\t\t\t");
                  _builder.append(",");
                  _builder.newLineIfNotEmpty();
                }
              }
              _builder.append("\t\t");
              _builder.append("\t\t");
              _builder.append("\"");
              String _categoria_2 = e_1.getCategoria();
              _builder.append(_categoria_2, "\t\t\t\t");
              _builder.append("\",");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("\t\t");
              int _order_1 = e_1.getOrder();
              _builder.append(_order_1, "\t\t\t\t");
              _builder.append(",");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("\t\t");
              _builder.append("new String[]{");
              _builder.newLine();
              {
                Respuesta _respuesta_14 = e_1.getRespuesta();
                if ((_respuesta_14 instanceof Ordenacion)) {
                  {
                    Respuesta _respuesta_15 = e_1.getRespuesta();
                    EList<String> _correctas_6 = _respuesta_15.getCorrectas();
                    String _get_3 = _correctas_6.get(0);
                    String[] _split_3 = _get_3.split("#");
                    for(final String s_1 : _split_3) {
                      {
                        Respuesta _respuesta_16 = e_1.getRespuesta();
                        EList<String> _correctas_7 = _respuesta_16.getCorrectas();
                        String _get_4 = _correctas_7.get(0);
                        String[] _split_4 = _get_4.split("#");
                        int _indexOf_3 = ((List<String>)Conversions.doWrapArray(_split_4)).indexOf(s_1);
                        Respuesta _respuesta_17 = e_1.getRespuesta();
                        EList<String> _correctas_8 = _respuesta_17.getCorrectas();
                        String _get_5 = _correctas_8.get(0);
                        String[] _split_5 = _get_5.split("#");
                        int _size_3 = ((List<String>)Conversions.doWrapArray(_split_5)).size();
                        int _minus_3 = (_size_3 - 1);
                        boolean _equals_5 = (_indexOf_3 == _minus_3);
                        if (_equals_5) {
                          _builder.append("\t\t");
                          _builder.append("\t\t");
                          _builder.append("\"");
                          _builder.append(s_1, "\t\t\t\t");
                          _builder.append("\"");
                          _builder.newLineIfNotEmpty();
                        } else {
                          _builder.append("\t\t");
                          _builder.append("\t\t");
                          _builder.append("\"");
                          _builder.append(s_1, "\t\t\t\t");
                          _builder.append("\",");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                } else {
                  {
                    Respuesta _respuesta_18 = e_1.getRespuesta();
                    EList<String> _correctas_9 = _respuesta_18.getCorrectas();
                    for(final String c_2 : _correctas_9) {
                      {
                        Respuesta _respuesta_19 = e_1.getRespuesta();
                        EList<String> _correctas_10 = _respuesta_19.getCorrectas();
                        int _indexOf_4 = _correctas_10.indexOf(c_2);
                        Respuesta _respuesta_20 = e_1.getRespuesta();
                        EList<String> _correctas_11 = _respuesta_20.getCorrectas();
                        int _size_4 = _correctas_11.size();
                        int _minus_4 = (_size_4 - 1);
                        boolean _equals_6 = (_indexOf_4 == _minus_4);
                        if (_equals_6) {
                          _builder.append("\t\t");
                          _builder.append("\t\t");
                          _builder.append("\"");
                          _builder.append(c_2, "\t\t\t\t");
                          _builder.append("\"");
                          _builder.newLineIfNotEmpty();
                        } else {
                          _builder.append("\t\t");
                          _builder.append("\t\t");
                          _builder.append("\"");
                          _builder.append(c_2, "\t\t\t\t");
                          _builder.append("\",");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              _builder.append("\t\t");
              _builder.append("\t\t");
              _builder.append("},");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("\t\t");
              _builder.append("new String[]{");
              _builder.newLine();
              {
                Respuesta _respuesta_21 = e_1.getRespuesta();
                EList<String> _alternativas_3 = _respuesta_21.getAlternativas();
                for(final String a_1 : _alternativas_3) {
                  {
                    Respuesta _respuesta_22 = e_1.getRespuesta();
                    EList<String> _alternativas_4 = _respuesta_22.getAlternativas();
                    int _indexOf_5 = _alternativas_4.indexOf(a_1);
                    Respuesta _respuesta_23 = e_1.getRespuesta();
                    EList<String> _alternativas_5 = _respuesta_23.getAlternativas();
                    int _size_5 = _alternativas_5.size();
                    int _minus_5 = (_size_5 - 1);
                    boolean _equals_7 = (_indexOf_5 == _minus_5);
                    if (_equals_7) {
                      _builder.append("\t\t");
                      _builder.append("\t\t");
                      _builder.append("\"");
                      _builder.append(a_1, "\t\t\t\t");
                      _builder.append("\"");
                      _builder.newLineIfNotEmpty();
                    } else {
                      _builder.append("\t\t");
                      _builder.append("\t\t");
                      _builder.append("\"");
                      _builder.append(a_1, "\t\t\t\t");
                      _builder.append("\",");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              _builder.append("\t\t");
              _builder.append("\t\t");
              _builder.append("},");
              _builder.newLine();
              {
                Respuesta _respuesta_24 = e_1.getRespuesta();
                if ((_respuesta_24 instanceof RespuestaUnica)) {
                  _builder.append("\t\t");
                  _builder.append("\t\t");
                  _builder.append("AnswerType.UNIQUE");
                  _builder.newLine();
                } else {
                  Respuesta _respuesta_25 = e_1.getRespuesta();
                  if ((_respuesta_25 instanceof RespuestaMultiple)) {
                    _builder.append("\t\t");
                    _builder.append("\t\t");
                    _builder.append("AnswerType.MULTIPLE");
                    _builder.newLine();
                  } else {
                    Respuesta _respuesta_26 = e_1.getRespuesta();
                    if ((_respuesta_26 instanceof TextoLibre)) {
                      _builder.append("\t\t");
                      _builder.append("\t\t");
                      _builder.append("AnswerType.WRITTEN");
                      _builder.newLine();
                    } else {
                      Respuesta _respuesta_27 = e_1.getRespuesta();
                      if ((_respuesta_27 instanceof Ordenacion)) {
                        _builder.append("\t\t");
                        _builder.append("\t\t");
                        _builder.append("AnswerType.ORDINATION");
                        _builder.newLine();
                      }
                    }
                  }
                }
              }
              _builder.append("\t\t");
              _builder.append("\t\t");
              _builder.append("));");
              _builder.newLine();
            }
          }
          _builder.append("\t\t");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("//Anade boton siguiente");
          _builder.newLine();
          {
            for(final String c_3 : categoria) {
              {
                int _indexOf_6 = categoria.indexOf(c_3);
                int _size_6 = categoria.size();
                int _minus_6 = (_size_6 - 1);
                boolean _equals_8 = (_indexOf_6 == _minus_6);
                if (_equals_8) {
                  _builder.append("\t\t");
                  _builder.append("p");
                  _builder.append(c_3, "\t\t");
                  _builder.append(".addNextButton(\"Corregir\", new ActionListener() {");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t");
                  _builder.append("\t");
                  _builder.append("@Override");
                  _builder.newLine();
                  _builder.append("\t\t");
                  _builder.append("\t");
                  _builder.append("public void actionPerformed(ActionEvent arg0) {");
                  _builder.newLine();
                  _builder.append("\t\t");
                  _builder.append("\t\t");
                  _builder.append("Panel panel = createFinalPanel();");
                  _builder.newLine();
                  _builder.append("\t\t");
                  _builder.append("\t\t");
                  _builder.append("addPanel(panel);");
                  _builder.newLine();
                  _builder.append("\t\t");
                  _builder.append("\t\t");
                  _builder.append("showPanel(panel);");
                  _builder.newLine();
                  _builder.append("\t\t");
                  _builder.append("\t");
                  _builder.append("}");
                  _builder.newLine();
                  _builder.append("\t\t");
                  _builder.append("});");
                  _builder.newLine();
                } else {
                  _builder.append("\t\t");
                  _builder.append("p");
                  _builder.append(c_3, "\t\t");
                  _builder.append(".addNextButton(\"Proxima\", new ActionListener() {");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t");
                  _builder.append("\t");
                  _builder.append("@Override");
                  _builder.newLine();
                  _builder.append("\t\t");
                  _builder.append("\t");
                  _builder.append("public void actionPerformed(ActionEvent arg0) {");
                  _builder.newLine();
                  _builder.append("\t\t");
                  _builder.append("\t\t");
                  _builder.append("showPanel(p");
                  int _indexOf_7 = categoria.indexOf(c_3);
                  int _plus = (_indexOf_7 + 1);
                  String _get_6 = categoria.get(_plus);
                  _builder.append(_get_6, "\t\t\t\t");
                  _builder.append(");");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t");
                  _builder.append("\t");
                  _builder.append("}");
                  _builder.newLine();
                  _builder.append("\t\t");
                  _builder.append("});");
                  _builder.newLine();
                }
              }
            }
          }
          _builder.append("\t\t");
          _builder.newLine();
          {
            for(final String c_4 : categoria) {
              _builder.append("\t\t");
              _builder.append("addExercisePanel(p");
              _builder.append(c_4, "\t\t");
              _builder.append(");");
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.append("\t\t");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("//Comienza en la pantalla inicial");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("showPanel(p");
          String _get_7 = categoria.get(0);
          _builder.append(_get_7, "\t\t");
          _builder.append(");");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("// anadir panel a la ventana");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("getContentPane().add(mainContainer);");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.newLine();
        } else {
          if ((h instanceof WizardAdaptativo)) {
            _builder.append("\t\t");
            _builder.append("//Crea pantallas");
            _builder.newLine();
            {
              for(final String c_5 : categoria) {
                _builder.append("\t\t");
                _builder.append("final ExercisePanel p");
                _builder.append(c_5, "\t\t");
                _builder.append(" = new ExercisePanel(\"");
                _builder.append(c_5, "\t\t");
                _builder.append("\", PanelType.WIZARD_ADAPTATIVE);");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t\t");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("//Anade ejercicios");
            _builder.newLine();
            {
              EList<Ejercicio> _ejercicios_2 = h.getEjercicios();
              for(final Ejercicio e_2 : _ejercicios_2) {
                _builder.append("\t\t");
                _builder.append("p");
                String _categoria_3 = e_2.getCategoria();
                _builder.append(_categoria_3, "\t\t");
                _builder.append(".addExercise(new Exercise(");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t\t");
                _builder.append("\"");
                String _name_2 = e_2.getName();
                _builder.append(_name_2, "\t\t\t\t");
                _builder.append("\", ");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t\t");
                _builder.append("\"");
                String _enunciado_2 = e_2.getEnunciado();
                _builder.append(_enunciado_2, "\t\t\t\t");
                _builder.append("\", ");
                _builder.newLineIfNotEmpty();
                {
                  double _puntuacionEj_4 = e_2.getPuntuacionEj();
                  boolean _equals_9 = Double.valueOf(_puntuacionEj_4).equals(Double.valueOf(0.0));
                  if (_equals_9) {
                    _builder.append("\t\t");
                    _builder.append("\t\t");
                    double _puntuacion_2 = h.getPuntuacion();
                    _builder.append(_puntuacion_2, "\t\t\t\t");
                    _builder.append(",");
                    _builder.newLineIfNotEmpty();
                  } else {
                    _builder.append("\t\t");
                    _builder.append("\t\t");
                    double _puntuacionEj_5 = e_2.getPuntuacionEj();
                    _builder.append(_puntuacionEj_5, "\t\t\t\t");
                    _builder.append(",");
                    _builder.newLineIfNotEmpty();
                  }
                }
                _builder.append("\t\t");
                _builder.append("\t\t");
                _builder.append("\"");
                String _categoria_4 = e_2.getCategoria();
                _builder.append(_categoria_4, "\t\t\t\t");
                _builder.append("\",");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t\t");
                int _order_2 = e_2.getOrder();
                _builder.append(_order_2, "\t\t\t\t");
                _builder.append(",");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t\t");
                _builder.append("new String[]{");
                _builder.newLine();
                {
                  Respuesta _respuesta_28 = e_2.getRespuesta();
                  if ((_respuesta_28 instanceof Ordenacion)) {
                    {
                      Respuesta _respuesta_29 = e_2.getRespuesta();
                      EList<String> _correctas_12 = _respuesta_29.getCorrectas();
                      String _get_8 = _correctas_12.get(0);
                      String[] _split_6 = _get_8.split("#");
                      for(final String s_2 : _split_6) {
                        {
                          Respuesta _respuesta_30 = e_2.getRespuesta();
                          EList<String> _correctas_13 = _respuesta_30.getCorrectas();
                          String _get_9 = _correctas_13.get(0);
                          String[] _split_7 = _get_9.split("#");
                          int _indexOf_8 = ((List<String>)Conversions.doWrapArray(_split_7)).indexOf(s_2);
                          Respuesta _respuesta_31 = e_2.getRespuesta();
                          EList<String> _correctas_14 = _respuesta_31.getCorrectas();
                          String _get_10 = _correctas_14.get(0);
                          String[] _split_8 = _get_10.split("#");
                          int _size_7 = ((List<String>)Conversions.doWrapArray(_split_8)).size();
                          int _minus_7 = (_size_7 - 1);
                          boolean _equals_10 = (_indexOf_8 == _minus_7);
                          if (_equals_10) {
                            _builder.append("\t\t");
                            _builder.append("\t\t");
                            _builder.append("\"");
                            _builder.append(s_2, "\t\t\t\t");
                            _builder.append("\"");
                            _builder.newLineIfNotEmpty();
                          } else {
                            _builder.append("\t\t");
                            _builder.append("\t\t");
                            _builder.append("\"");
                            _builder.append(s_2, "\t\t\t\t");
                            _builder.append("\",");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                  } else {
                    {
                      Respuesta _respuesta_32 = e_2.getRespuesta();
                      EList<String> _correctas_15 = _respuesta_32.getCorrectas();
                      for(final String c_6 : _correctas_15) {
                        {
                          Respuesta _respuesta_33 = e_2.getRespuesta();
                          EList<String> _correctas_16 = _respuesta_33.getCorrectas();
                          int _indexOf_9 = _correctas_16.indexOf(c_6);
                          Respuesta _respuesta_34 = e_2.getRespuesta();
                          EList<String> _correctas_17 = _respuesta_34.getCorrectas();
                          int _size_8 = _correctas_17.size();
                          int _minus_8 = (_size_8 - 1);
                          boolean _equals_11 = (_indexOf_9 == _minus_8);
                          if (_equals_11) {
                            _builder.append("\t\t");
                            _builder.append("\t\t");
                            _builder.append("\"");
                            _builder.append(c_6, "\t\t\t\t");
                            _builder.append("\"");
                            _builder.newLineIfNotEmpty();
                          } else {
                            _builder.append("\t\t");
                            _builder.append("\t\t");
                            _builder.append("\"");
                            _builder.append(c_6, "\t\t\t\t");
                            _builder.append("\",");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                  }
                }
                _builder.append("\t\t");
                _builder.append("\t\t");
                _builder.append("},");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("\t\t");
                _builder.append("new String[]{");
                _builder.newLine();
                {
                  Respuesta _respuesta_35 = e_2.getRespuesta();
                  EList<String> _alternativas_6 = _respuesta_35.getAlternativas();
                  for(final String a_2 : _alternativas_6) {
                    {
                      Respuesta _respuesta_36 = e_2.getRespuesta();
                      EList<String> _alternativas_7 = _respuesta_36.getAlternativas();
                      int _indexOf_10 = _alternativas_7.indexOf(a_2);
                      Respuesta _respuesta_37 = e_2.getRespuesta();
                      EList<String> _alternativas_8 = _respuesta_37.getAlternativas();
                      int _size_9 = _alternativas_8.size();
                      int _minus_9 = (_size_9 - 1);
                      boolean _equals_12 = (_indexOf_10 == _minus_9);
                      if (_equals_12) {
                        _builder.append("\t\t");
                        _builder.append("\t\t");
                        _builder.append("\"");
                        _builder.append(a_2, "\t\t\t\t");
                        _builder.append("\"");
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("\t\t");
                        _builder.append("\t\t");
                        _builder.append("\"");
                        _builder.append(a_2, "\t\t\t\t");
                        _builder.append("\",");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  }
                }
                _builder.append("\t\t");
                _builder.append("\t\t");
                _builder.append("},");
                _builder.newLine();
                {
                  Respuesta _respuesta_38 = e_2.getRespuesta();
                  if ((_respuesta_38 instanceof RespuestaUnica)) {
                    _builder.append("\t\t");
                    _builder.append("\t\t");
                    _builder.append("AnswerType.UNIQUE");
                    _builder.newLine();
                  } else {
                    Respuesta _respuesta_39 = e_2.getRespuesta();
                    if ((_respuesta_39 instanceof RespuestaMultiple)) {
                      _builder.append("\t\t");
                      _builder.append("\t\t");
                      _builder.append("AnswerType.MULTIPLE");
                      _builder.newLine();
                    } else {
                      Respuesta _respuesta_40 = e_2.getRespuesta();
                      if ((_respuesta_40 instanceof TextoLibre)) {
                        _builder.append("\t\t");
                        _builder.append("\t\t");
                        _builder.append("AnswerType.WRITTEN");
                        _builder.newLine();
                      } else {
                        Respuesta _respuesta_41 = e_2.getRespuesta();
                        if ((_respuesta_41 instanceof Ordenacion)) {
                          _builder.append("\t\t");
                          _builder.append("\t\t");
                          _builder.append("AnswerType.ORDINATION");
                          _builder.newLine();
                        }
                      }
                    }
                  }
                }
                _builder.append("\t\t");
                _builder.append("\t\t");
                _builder.append("));");
                _builder.newLine();
              }
            }
            _builder.append("\t\t");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("//Anade boton siguiente");
            _builder.newLine();
            {
              for(final String c_7 : categoria) {
                {
                  int _indexOf_11 = categoria.indexOf(c_7);
                  int _size_10 = categoria.size();
                  int _minus_10 = (_size_10 - 1);
                  boolean _equals_13 = (_indexOf_11 == _minus_10);
                  if (_equals_13) {
                    _builder.append("\t\t");
                    _builder.append("p");
                    _builder.append(c_7, "\t\t");
                    _builder.append(".addNextButton(\"Corregir\", new ActionListener() {");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("@Override");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("public void actionPerformed(ActionEvent arg0) {");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("\t\t");
                    _builder.append("Panel panel = createFinalPanel();");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("\t\t");
                    _builder.append("addPanel(panel);");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("\t\t");
                    _builder.append("showPanel(panel);");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("});");
                    _builder.newLine();
                  } else {
                    _builder.append("\t\t");
                    _builder.append("p");
                    _builder.append(c_7, "\t\t");
                    _builder.append(".addNextButton(\"Proxima\", new ActionListener() {");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("@Override");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("public void actionPerformed(ActionEvent arg0) {");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("\t\t");
                    _builder.append("showPanel(p");
                    int _indexOf_12 = categoria.indexOf(c_7);
                    int _plus_1 = (_indexOf_12 + 1);
                    String _get_11 = categoria.get(_plus_1);
                    _builder.append(_get_11, "\t\t\t\t");
                    _builder.append(");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("});");
                    _builder.newLine();
                  }
                }
              }
            }
            _builder.append("\t\t");
            _builder.newLine();
            {
              for(final String c_8 : categoria) {
                _builder.append("\t\t");
                _builder.append("addExercisePanel(p");
                _builder.append(c_8, "\t\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t\t");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("//Comienza en la pantalla inicial");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("showPanel(p");
            String _get_12 = categoria.get(0);
            _builder.append(_get_12, "\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("// anadir panel a la ventana");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("getContentPane().add(mainContainer);");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Panel createFinalPanel() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Panel panel = new Panel(\"Nota\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("calculaNota(panel);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JLabel n = new JLabel(\"Nota : \"+nota);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("panel.add(n);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("panel.addButton(\"Salir\", new ActionListener() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public void actionPerformed(ActionEvent arg0) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Autoevaluacion.this.setVisible(false);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Autoevaluacion.this.dispose();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return panel;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addExercisePanel(ExercisePanel ep) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("exercisePanels.add(ep);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("addPanel(ep);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addPanel(Panel panel) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("panel.setupView();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("mainContainer.add(panel, panel.getName());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void showPanel(Panel panel) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("((CardLayout)mainContainer.getLayout()).show(mainContainer, panel.getName());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void mostrar() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.pack();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.setVisible(true);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void calculaNota(Panel pantalla) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("nota = 0.0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (ExercisePanel pe : exercisePanels) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (Exercise e : pe.getAllExercises()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(e.isAnswered()){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("double c = e.corrige(penalizacion);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("nota += c;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (c <= 0) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("pantalla.add(e.muestraCorreccion());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
