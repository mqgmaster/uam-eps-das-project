/*
 * generated by Xtext
 */
package autoevaluacion.validation

import org.eclipse.xtext.validation.Check
import Autoevaluacion.Hoja
import Autoevaluacion.Wizard
import Autoevaluacion.Ejercicio
import Autoevaluacion.WizardAdaptativo
import Autoevaluacion.AutoevaluacionPackage
import org.eclipse.emf.codegen.ecore.genmodel.impl.Literals
import Autoevaluacion.Respuesta

//import org.eclipse.xtext.validation.Check

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class AutoevaluacionValidator extends AbstractAutoevaluacionValidator {

/**
 * Lanza un warning si la puntuacion global es negativa
 */
	@Check
	def puntuacionNegativa(Hoja h){
		if(h.puntuacion<0)
			warning('Puntuacion negativa', AutoevaluacionPackage.Literals.HOJA__PUNTUACION);
	}
	
/**
 * Lanza un warning si la penalizacion es negativa
 */
	@Check
	def penalizacionNegativa(Hoja h){
		if(h.penalizacion<0)
			warning('Penalizacion negativa', AutoevaluacionPackage.Literals.HOJA__PENALIZACION);
	}

/**
 * Lanza un warning si la puntuacion del ejercicio es negativa
 */	
	@Check
	def puntuacionEjNegativa(Ejercicio e){
		if(e.puntuacionEj<0){
			warning('Puntuacion de ejercicio negativo', AutoevaluacionPackage.Literals.EJERCICIO__PUNTUACION_EJ);
		}
	}
	
/**
 * Lanza un error si no se asigna categoria a los ejercicios de una hoja del tipo Wizard o WizardAdaptativo
 */
	@Check 
	def categoriaWizards(Ejercicio e){
		var h = e.eContainer as Hoja
		if(h instanceof Wizard || h instanceof WizardAdaptativo){
			if(e.categoria.nullOrEmpty){
				error('Asigna una categoria al ejercicio para agruparlo', AutoevaluacionPackage.Literals.EJERCICIO__CATEGORIA, 'categoriaWizard');
			}
		}
	}
	
/**
 * Lanza un error si coincide alguna respuesta del array de correctas y alternativas
 */
	@Check
	def checkAnswers(Respuesta r) {
		val correctas = r.correctas;
		val alternativas = r.alternativas;
		correctas.forEach [ c, i |
			if (alternativas.contains(c)) {
				error('Alternativas no puede contener respuestas correctas',
					AutoevaluacionPackage.Literals.RESPUESTA__ALTERNATIVAS);
			}
		]
		
		alternativas.forEach [ c, i |
			if (correctas.contains(c)) {
				error('Correctas no puede contener alternativas',
					AutoevaluacionPackage.Literals.RESPUESTA__CORRECTAS);
			}
		]
	}


//  public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					MyDslPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
}
